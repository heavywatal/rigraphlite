% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/games.R
\name{degree_sequence_game}
\alias{degree_sequence_game}
\alias{k_regular_game}
\alias{rewire}
\title{Degree-constrained models}
\source{
\url{https://igraph.org/c/html/latest/igraph-Games.html#degree-constrained-games}
}
\usage{
degree_sequence_game(out_degrees, in_degrees = integer(0), degseq_method = 0L)

k_regular_game(n, k, directed = FALSE, multiple = FALSE)

rewire(graph, n_trials, edge_type_sw = 0L)
}
\arguments{
\item{out_degrees, in_degrees}{Integer vectors giving the degree sequences.
Undirected graphs are generated if an empty \code{in_degrees} is given.}

\item{degseq_method}{The method to generate a graph from the degree sequence:
\{0: smallest, 1: largest, 2: index\}.}

\item{n}{The number of vertices.}

\item{k}{The degree of each vertex in an undirected graph,
or the out-degree and in-degree of each vertex in a directed graph.}

\item{directed}{A logical value, whether to consider directed paths.
Ignored for undirected graphs.}

\item{multiple}{A logical value, whether to keep multiple (parallel) edges.}

\item{graph}{An \code{\link{igraph_ptr}} object.}

\item{n_trials}{The number of rewiring trials to perform.}

\item{edge_type_sw}{The types of edges to allow in the graph:
\{0: simple, 1: loops, 6: multiple, 7: loops and multiple\}.}
}
\value{
An \code{\link{igraph_ptr}} object.
}
\description{
Random graph models with hard or soft degree constraints.

\code{rewire()} creates a copy of the input graph,
and performs \code{n_trials} of edge rewirings while preserving the degree sequence.
}
\examples{
out_deg = seq_len(4L)
undirected = degree_sequence_game(out_deg)
degree(undirected)

in_deg = rev(out_deg)
directed = degree_sequence_game(out_deg, in_deg)
degree(directed, mode = 1L)
degree(directed, mode = 2L)

k_regular = k_regular_game(7L, 2L)
degree(k_regular)
degree(rewire(k_regular, 9L))
}
\seealso{
\code{\link[=rewire_edges]{rewire_edges()}} for an edge rewiring model without degree constraints.
}
