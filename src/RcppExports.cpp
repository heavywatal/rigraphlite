// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "igraphlite_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// edgelist
Rcpp::NumericMatrix edgelist(const igraph_t& graph);
RcppExport SEXP _igraphlite_edgelist(SEXP graphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const igraph_t& >::type graph(graphSEXP);
    rcpp_result_gen = Rcpp::wrap(edgelist(graph));
    return rcpp_result_gen;
END_RCPP
}
// make_empty_graph
igraph_t make_empty_graph(int n, bool directed);
RcppExport SEXP _igraphlite_make_empty_graph(SEXP nSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(make_empty_graph(n, directed));
    return rcpp_result_gen;
END_RCPP
}
// make_graph
igraph_t make_graph(const Rcpp::NumericVector& edges, int n, bool directed);
RcppExport SEXP _igraphlite_make_graph(SEXP edgesSEXP, SEXP nSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(make_graph(edges, n, directed));
    return rcpp_result_gen;
END_RCPP
}
// make_tree
igraph_t make_tree(int n, int children, int mode);
RcppExport SEXP _igraphlite_make_tree(SEXP nSEXP, SEXP childrenSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(make_tree(n, children, mode));
    return rcpp_result_gen;
END_RCPP
}
// degree
Rcpp::NumericVector degree(const igraph_t& graph, const Rcpp::NumericVector& vs, int mode, bool loops);
RcppExport SEXP _igraphlite_degree(SEXP graphSEXP, SEXP vsSEXP, SEXP modeSEXP, SEXP loopsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const igraph_t& >::type graph(graphSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< bool >::type loops(loopsSEXP);
    rcpp_result_gen = Rcpp::wrap(degree(graph, vs, mode, loops));
    return rcpp_result_gen;
END_RCPP
}
// len
int len(const std::vector<std::string>& args);
RcppExport SEXP _igraphlite_len(SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(len(args));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_igraph();
RcppExport SEXP _rcpp_module_boot_test();

static const R_CallMethodDef CallEntries[] = {
    {"_igraphlite_edgelist", (DL_FUNC) &_igraphlite_edgelist, 1},
    {"_igraphlite_make_empty_graph", (DL_FUNC) &_igraphlite_make_empty_graph, 2},
    {"_igraphlite_make_graph", (DL_FUNC) &_igraphlite_make_graph, 3},
    {"_igraphlite_make_tree", (DL_FUNC) &_igraphlite_make_tree, 3},
    {"_igraphlite_degree", (DL_FUNC) &_igraphlite_degree, 4},
    {"_igraphlite_len", (DL_FUNC) &_igraphlite_len, 1},
    {"_rcpp_module_boot_igraph", (DL_FUNC) &_rcpp_module_boot_igraph, 0},
    {"_rcpp_module_boot_test", (DL_FUNC) &_rcpp_module_boot_test, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_igraphlite(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
