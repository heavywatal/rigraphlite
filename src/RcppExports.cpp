// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "igraphlite_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// graph_from_data_frame
IGraph graph_from_data_frame(const Rcpp::DataFrame& df, bool directed);
RcppExport SEXP _igraphlite_graph_from_data_frame(SEXP dfSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_from_data_frame(df, directed));
    return rcpp_result_gen;
END_RCPP
}
// graph_from_symbolic_edgelist
IGraph graph_from_symbolic_edgelist(const Rcpp::RObject& edgelist, bool directed);
RcppExport SEXP _igraphlite_graph_from_symbolic_edgelist(SEXP edgelistSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RObject& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_from_symbolic_edgelist(edgelist, directed));
    return rcpp_result_gen;
END_RCPP
}
// graph_from_edgelist
IGraph graph_from_edgelist(const Rcpp::IntegerMatrix& edgelist, bool directed);
RcppExport SEXP _igraphlite_graph_from_edgelist(SEXP edgelistSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_from_edgelist(edgelist, directed));
    return rcpp_result_gen;
END_RCPP
}
// graph_create
IGraph graph_create(const Rcpp::IntegerVector& edges, int n, bool directed);
RcppExport SEXP _igraphlite_graph_create(SEXP edgesSEXP, SEXP nSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_create(edges, n, directed));
    return rcpp_result_gen;
END_RCPP
}
// graph_star
IGraph graph_star(int n, int mode, int center);
RcppExport SEXP _igraphlite_graph_star(SEXP nSEXP, SEXP modeSEXP, SEXP centerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int >::type center(centerSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_star(n, mode, center));
    return rcpp_result_gen;
END_RCPP
}
// graph_lattice
IGraph graph_lattice(const Rcpp::IntegerVector& dim, int nei, bool directed, bool mutual, bool circular);
RcppExport SEXP _igraphlite_graph_lattice(SEXP dimSEXP, SEXP neiSEXP, SEXP directedSEXP, SEXP mutualSEXP, SEXP circularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type nei(neiSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< bool >::type mutual(mutualSEXP);
    Rcpp::traits::input_parameter< bool >::type circular(circularSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_lattice(dim, nei, directed, mutual, circular));
    return rcpp_result_gen;
END_RCPP
}
// graph_ring
IGraph graph_ring(int n, bool directed, bool mutual, bool circular);
RcppExport SEXP _igraphlite_graph_ring(SEXP nSEXP, SEXP directedSEXP, SEXP mutualSEXP, SEXP circularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< bool >::type mutual(mutualSEXP);
    Rcpp::traits::input_parameter< bool >::type circular(circularSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_ring(n, directed, mutual, circular));
    return rcpp_result_gen;
END_RCPP
}
// graph_tree
IGraph graph_tree(int n, int children, int mode);
RcppExport SEXP _igraphlite_graph_tree(SEXP nSEXP, SEXP childrenSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_tree(n, children, mode));
    return rcpp_result_gen;
END_RCPP
}
// graph_full
IGraph graph_full(int n, bool directed, bool mutual);
RcppExport SEXP _igraphlite_graph_full(SEXP nSEXP, SEXP directedSEXP, SEXP mutualSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< bool >::type mutual(mutualSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_full(n, directed, mutual));
    return rcpp_result_gen;
END_RCPP
}
// graph_famous
IGraph graph_famous(const char* name);
RcppExport SEXP _igraphlite_graph_famous(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_famous(name));
    return rcpp_result_gen;
END_RCPP
}
// igraph_version
Rcpp::StringVector igraph_version();
RcppExport SEXP _igraphlite_igraph_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(igraph_version());
    return rcpp_result_gen;
END_RCPP
}
// rng_seed
void rng_seed(long seed);
RcppExport SEXP _igraphlite_rng_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type seed(seedSEXP);
    rng_seed(seed);
    return R_NilValue;
END_RCPP
}
// path_length_count_within
Rcpp::IntegerVector path_length_count_within(const IGraph& graph, const Rcpp::IntegerVector& vids, bool directed);
RcppExport SEXP _igraphlite_path_length_count_within(SEXP graphSEXP, SEXP vidsSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IGraph& >::type graph(graphSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type vids(vidsSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(path_length_count_within(graph, vids, directed));
    return rcpp_result_gen;
END_RCPP
}
// path_length_count_between
Rcpp::IntegerVector path_length_count_between(const IGraph& graph, const Rcpp::IntegerVector& from, const Rcpp::IntegerVector& to, bool directed);
RcppExport SEXP _igraphlite_path_length_count_between(SEXP graphSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IGraph& >::type graph(graphSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type to(toSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(path_length_count_between(graph, from, to, directed));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_igraph();

static const R_CallMethodDef CallEntries[] = {
    {"_igraphlite_graph_from_data_frame", (DL_FUNC) &_igraphlite_graph_from_data_frame, 2},
    {"_igraphlite_graph_from_symbolic_edgelist", (DL_FUNC) &_igraphlite_graph_from_symbolic_edgelist, 2},
    {"_igraphlite_graph_from_edgelist", (DL_FUNC) &_igraphlite_graph_from_edgelist, 2},
    {"_igraphlite_graph_create", (DL_FUNC) &_igraphlite_graph_create, 3},
    {"_igraphlite_graph_star", (DL_FUNC) &_igraphlite_graph_star, 3},
    {"_igraphlite_graph_lattice", (DL_FUNC) &_igraphlite_graph_lattice, 5},
    {"_igraphlite_graph_ring", (DL_FUNC) &_igraphlite_graph_ring, 4},
    {"_igraphlite_graph_tree", (DL_FUNC) &_igraphlite_graph_tree, 3},
    {"_igraphlite_graph_full", (DL_FUNC) &_igraphlite_graph_full, 3},
    {"_igraphlite_graph_famous", (DL_FUNC) &_igraphlite_graph_famous, 1},
    {"_igraphlite_igraph_version", (DL_FUNC) &_igraphlite_igraph_version, 0},
    {"_igraphlite_rng_seed", (DL_FUNC) &_igraphlite_rng_seed, 1},
    {"_igraphlite_path_length_count_within", (DL_FUNC) &_igraphlite_path_length_count_within, 3},
    {"_igraphlite_path_length_count_between", (DL_FUNC) &_igraphlite_path_length_count_between, 4},
    {"_rcpp_module_boot_igraph", (DL_FUNC) &_rcpp_module_boot_igraph, 0},
    {NULL, NULL, 0}
};

void igraphlite_init(DllInfo *dll);
RcppExport void R_init_igraphlite(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    igraphlite_init(dll);
}
