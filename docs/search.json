[{"path":"https://heavywatal.github.io/rigraphlite/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Watal M. Iwasaki Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Watal M. Iwasaki. Author, maintainer.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iwasaki W (2025). igraphlite: Lightweight R Interface Igraph Network Analysis Library. R package version 0.10.15.1, https://heavywatal.github.io/rigraphlite/.","code":"@Manual{,   title = {igraphlite: Lightweight R Interface to Igraph Network Analysis Library},   author = {Watal M. Iwasaki},   year = {2025},   note = {R package version 0.10.15.1},   url = {https://heavywatal.github.io/rigraphlite/}, }"},{"path":"https://heavywatal.github.io/rigraphlite/index.html","id":"igraphlite","dir":"","previous_headings":"","what":"Lightweight R Interface to Igraph Network Analysis Library","title":"Lightweight R Interface to Igraph Network Analysis Library","text":"igraphlite cpp11-powered R package interface igraph network analysis library. fork existing R igraph package, reboot scratch striving good performance, simple codebase, consistency C implementation.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Lightweight R Interface to Igraph Network Analysis Library","text":"Unix-like environment (macOS, Linux, WSL, MinGW MSYS2, etc.) C++14 compiler (clang++ >= Apple LLVM 8.1, g++ >= 5.3) CMake (>= 3.18.0) R igraph package C igraph library: igraphlite first tries find_package() ${igraph_ROOT} ${CMAKE_PREFIX_PATH}; found, builds installs appropriate version automatically.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Lightweight R Interface to Igraph Network Analysis Library","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"heavywatal/rigraphlite\")"},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjacent.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic Properties — are_adjacent","title":"Basic Properties — are_adjacent","text":"Basic Properties","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjacent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic Properties — are_adjacent","text":"","code":"are_adjacent(graph, from, to)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjacent.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Basic Properties — are_adjacent","text":"https://igraph.org/c/doc/igraph-Structural.html#basic-properties","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjacent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic Properties — are_adjacent","text":"graph igraph_ptr object. integer vector vertex IDs. integer vector vertex IDs.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjacent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic Properties — are_adjacent","text":"logical, TRUE adjacent, FALSE otherwise.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjacent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic Properties — are_adjacent","text":"","code":"g = graph_tree(5L) are_adjacent(g, 1L, 2L) #> [1] TRUE are_adjacent(g, 1L, 4L) #> [1] FALSE"},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjacency lists and incidence lists — as_adjlist","title":"Adjacency lists and incidence lists — as_adjlist","text":"lists length number vertices graph.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjacency lists and incidence lists — as_adjlist","text":"","code":"as_adjlist(graph, mode = 3L, loops = 1L, multiple = 1L)  as_inclist(graph, mode = 3L, loops = 1L)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Adjacency lists and incidence lists — as_adjlist","text":"https://igraph.org/c/doc/igraph-Data-structures.html#igraph-Adjlists","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjacency lists and incidence lists — as_adjlist","text":"graph igraph_ptr object. mode integer value edge type count; {1: , 2: , 3: }. loops integer value, treat loop edges; {0: NO_LOOPS, 1: LOOPS, 2: LOOPS_ONCE} multiple logical value, whether keep multiple (parallel) edges.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjacency lists and incidence lists — as_adjlist","text":"as_adjlist() returns list adjacent vertices vertex. as_inclist() returns list incident edges vertex.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/adjlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjacency lists and incidence lists — as_adjlist","text":"","code":"g = graph_tree(5L) as_adjlist(g, mode = 1L) #> [[1]] #> [1] 2 3 #>  #> [[2]] #> [1] 4 5 #>  #> [[3]] #> integer(0) #>  #> [[4]] #> integer(0) #>  #> [[5]] #> integer(0) #>  as_inclist(g, mode = 1L) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 3 4 #>  #> [[3]] #> integer(0) #>  #> [[4]] #> integer(0) #>  #> [[5]] #> integer(0) #>"},{"path":"https://heavywatal.github.io/rigraphlite/reference/attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set vertex and edge attributes — Vattr","title":"Get and set vertex and edge attributes — Vattr","text":"Attributes can set retrieved several ways: name argument: Vattr(g, \"name\") = letters[1:6] $ operator: Vattr(g)$name = letters[1:6] [[ operator: Vattr(g)[[\"name\"]] = letters[1:6] direct operation data.frame: Vattr(g) = data.frame(name = letters[1:6]) Using name argument setting $ operetor getting efficient way according brief benchmarking.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set vertex and edge attributes — Vattr","text":"","code":"Vattr(graph, name)  Vattr(graph, name) <- value  Eattr(graph, name)  Eattr(graph, name) <- value  V(graph)  E(graph)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set vertex and edge attributes — Vattr","text":"graph igraph_ptr object. name Name attribute query set. missing, attributes returned replaced. value vector data.frame.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set vertex and edge attributes — Vattr","text":"Vattr() Eattr() return data.frame nubmer rows number vertices edges graph, respectively. V() E() return integer vector vertex edge IDs, respectively.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set vertex and edge attributes — Vattr","text":"","code":"g = graph_create(letters[1:6]) Vattr(g) #> # A tibble: 6 × 1 #>   name  #>   <chr> #> 1 a     #> 2 b     #> 3 c     #> 4 d     #> 5 e     #> 6 f     Eattr(g, \"weight\") = seq_len(ecount(g)) Eattr(g) #> # A tibble: 3 × 1 #>   weight #>    <int> #> 1      1 #> 2      2 #> 3      3 V(g) #> [1] 1 2 3 4 5 6 E(g) #> [1] 1 2 3"},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-add-delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding and deleting vertices and edges — basic-add-delete","title":"Adding and deleting vertices and edges — basic-add-delete","text":"Adding deleting vertices edges","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-add-delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding and deleting vertices and edges — basic-add-delete","text":"","code":"add_edges(graph, eids)  add_vertices(graph, n)  delete_edges(graph, eids)  delete_vertices(graph, vids)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-add-delete.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Adding and deleting vertices and edges — basic-add-delete","text":"https://igraph.org/c/html/latest/igraph-Basic.html#adding--deleting-vertices--edges","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-add-delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding and deleting vertices and edges — basic-add-delete","text":"graph igraph_ptr object. eids integer vector edge IDs. n number vertices add. vids integer vector vertex IDs.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-add-delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adding and deleting vertices and edges — basic-add-delete","text":"modified graph.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-adjacent.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic query operations to get adjacency — basic-adjacent","title":"Basic query operations to get adjacency — basic-adjacent","text":"Basic query operations get adjacency","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-adjacent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic query operations to get adjacency — basic-adjacent","text":"","code":"edge(graph, eid)  neighbors(graph, vid, mode = 3L)  incident(graph, vid, mode = 3L)  degree(graph, vids = integer(0), mode = 3L, loops = TRUE)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-adjacent.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Basic query operations to get adjacency — basic-adjacent","text":"https://igraph.org/c/doc/igraph-Basic.html#basic-query-operations","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-adjacent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic query operations to get adjacency — basic-adjacent","text":"graph igraph_ptr object. eid integer value edge ID. vid integer value vertex ID. mode integer value edge type count; {1: , 2: , 3: }. vids integer vector vertex IDs. loops whether self-loop counted.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-adjacent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic query operations to get adjacency — basic-adjacent","text":"edge() returns head tail vertices edge. neighbors() returns adjacent vertices vertex. incident() returns incident edges vertex. degree() returns degrees vertices graph.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic-adjacent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic query operations to get adjacency — basic-adjacent","text":"","code":"g = graph_tree(5L) edge(g, 1L) #> [1] 1 2 neighbors(g, 1L) #> [1] 2 3 incident(g, 1L) #> [1] 1 2 degree(g, mode = 1L) #> [1] 2 2 0 0 0 degree(g, mode = 2L) #> [1] 0 1 1 1 1 degree(g, mode = 3L) #> [1] 2 3 1 1 1"},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic query operations — basic-query","title":"Basic query operations — basic-query","text":"Basic query operations","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic query operations — basic-query","text":"","code":"vcount(graph)  ecount(graph)  is_directed(graph)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Basic query operations — basic-query","text":"https://igraph.org/c/doc/igraph-Basic.html#basic-query-operations","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic query operations — basic-query","text":"graph igraph_ptr object.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic query operations — basic-query","text":"vcount() returns number vertices graph. ecount() returns number edges graph. is_directed() returns whether graph directed.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/basic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic query operations — basic-query","text":"","code":"g = graph_tree(5L) vcount(g) #> [1] 5 ecount(g) #> [1] 4 is_directed(g) #> [1] TRUE"},{"path":"https://heavywatal.github.io/rigraphlite/reference/centrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Centrality measures — centrality","title":"Centrality measures — centrality","text":"betweenness centrality edge number geodesics going .","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/centrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centrality measures — centrality","text":"","code":"edge_betweenness(graph, directed = is_directed(graph), weights = numeric(0))  edge_betweenness_subset(   graph,   directed = is_directed(graph),   eids = integer(0),   weights = numeric(0),   from = integer(0),   to = integer(0) )"},{"path":"https://heavywatal.github.io/rigraphlite/reference/centrality.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Centrality measures — centrality","text":"https://igraph.org/c/doc/igraph-Structural.html#centrality-measures","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/centrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centrality measures — centrality","text":"graph igraph_ptr object. directed logical value, whether consider directed paths. Ignored undirected graphs. weights numeric vector edge weights; TRUE use Eattr(graph, \"weight\"). eids integer vector edge IDs. integer vector vertex IDs. integer vector vertex IDs.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/centrality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centrality measures — centrality","text":"edge_betweenness() returns numeric vector edge betweenness edge graph. edge_betweenness_subset() variant edge_betweenness() computes betweenness using subset paths .","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/centrality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centrality measures — centrality","text":"","code":"g = graph_tree(5L) edge_betweenness(g) #> [1] 3 1 2 2 edge_betweenness_subset(g, from = Vsource(g), to = Vsink(g)) #> [1] 2 1 1 1"},{"path":"https://heavywatal.github.io/rigraphlite/reference/common_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Common parameters used throughout the package — common_params","title":"Common parameters used throughout the package — common_params","text":"function nothing. designed used @inheritParams.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/common_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common parameters used throughout the package — common_params","text":"","code":"common_params(   graph,   vids,   vid,   from,   to,   eids,   eid,   mode,   weights,   directed,   loops,   multiple )"},{"path":"https://heavywatal.github.io/rigraphlite/reference/common_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common parameters used throughout the package — common_params","text":"graph igraph_ptr object. vids integer vector vertex IDs. vid integer value vertex ID. integer vector vertex IDs. integer vector vertex IDs. eids integer vector edge IDs. eid integer value edge ID. mode integer value edge type count; {1: , 2: , 3: }. weights numeric vector edge weights; TRUE use Eattr(graph, \"weight\"). directed logical value, whether consider directed paths. Ignored undirected graphs. loops integer value, treat loop edges; {0: NO_LOOPS, 1: LOOPS, 2: LOOPS_ONCE} multiple logical value, whether keep multiple (parallel) edges.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/components.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph Components — components","title":"Graph Components — components","text":"Graph Components","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph Components — components","text":"","code":"subcomponent(graph, vid, mode = 1L)  subcomponents(graph, vids, mode = 1L)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/components.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Graph Components — components","text":"https://igraph.org/c/doc/igraph-Structural.html#graph-components","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph Components — components","text":"graph igraph_ptr object. vid integer value vertex ID. mode integer value edge type count; {1: , 2: , 3: }. vids integer vector vertex IDs.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph Components — components","text":"subcomponent() returns IDs vertices reachable given vertex. subcomponents() returns list integer vectors applying subcomponent() vertex vids.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph Components — components","text":"","code":"g = graph_tree(5L) subcomponent(g, 2L) #> [1] 2 4 5 subcomponents(g, c(1L, 2L)) #> [[1]] #> [1] 1 2 3 4 5 #>  #> [[2]] #> [1] 2 4 5 #>"},{"path":"https://heavywatal.github.io/rigraphlite/reference/conversion-impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert edge lists to igraph objects. — graph_from_data_frame","title":"Convert edge lists to igraph objects. — graph_from_data_frame","text":"edge list two-column matrix data.frame first column contains source vertices second column contains target vertices.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/conversion-impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert edge lists to igraph objects. — graph_from_data_frame","text":"","code":"graph_from_data_frame(edgelist, directed = TRUE)  graph_from_symbolic_edgelist(edgelist, directed = TRUE)  graph_from_edgelist(edgelist, directed = TRUE)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/conversion-impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert edge lists to igraph objects. — graph_from_data_frame","text":"edgelist edge list two-column matrix data.frame format. graph_from_edgelist() accepts integer values, interpreting directly vertex IDs starting 1. functions support non-numeric values, treating vertex names. data.frame may contain additional columns edge attributes. directed logical.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/conversion-impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert edge lists to igraph objects. — graph_from_data_frame","text":"igraph object.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/conversion-impl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert edge lists to igraph objects. — graph_from_data_frame","text":"","code":"edges = seq_len(6L) + 3L edgelist = matrix(edges, ncol = 2L, byrow = TRUE) g = graph_from_edgelist(edgelist) |> print() #> $V  tibble [9 × 0] (S3: tbl_df/tbl/data.frame) #>  Named list() #> # A tibble: 3 × 2 #>    from    to #>   <int> <int> #> 1     4     5 #> 2     6     7 #> 3     8     9 stopifnot(all.equal(as.matrix(g), as.matrix(graph_create(edges))))  symbolic = matrix(letters[edges], ncol = 2L) graph_from_symbolic_edgelist(symbolic) #> $V  tibble [6 × 1] (S3: tbl_df/tbl/data.frame) #>  $ name: chr [1:6] \"d\" \"g\" \"e\" \"h\" ... #> # A tibble: 3 × 2 #>   from  to    #>   <chr> <chr> #> 1 d     g     #> 2 e     h     #> 3 f     i"},{"path":"https://heavywatal.github.io/rigraphlite/reference/conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert igraph objects to and from other formats. — as_igraph","title":"Convert igraph objects to and from other formats. — as_igraph","text":"Round-trip conversion guaranteed currently. Conversion data.frame preserves edge attributes vertex names, vertex attributes lost, internal vertex IDs may change.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert igraph objects to and from other formats. — as_igraph","text":"","code":"as_igraph(x, ...)  # Default S3 method as_igraph(x, ...)  # S3 method for class 'matrix' as_igraph(x, ...)  # S3 method for class 'data.frame' as_igraph(x, ...)  # S3 method for class 'igraph_ptr' as.data.frame(x, ...)  # S3 method for class 'igraph_ptr' as.matrix(x, ...)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert igraph objects to and from other formats. — as_igraph","text":"x vector, matrix, data.frame, graph object converted. ... Additional arguments passed conversion function.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert igraph objects to and from other formats. — as_igraph","text":"as_igraph() returns igraph object. .data.frame() returns edge list data.frame format, may include additional columns edge attributes. .matrix() returns edge list matrix format.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/conversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert igraph objects to and from other formats. — as_igraph","text":"","code":"edges = seq_len(6L) g1 = as_igraph(edges) edgelist = as.matrix(g1) |> print() #>      [,1] [,2] #> [1,]    1    2 #> [2,]    3    4 #> [3,]    5    6  g2 = as_igraph(edgelist) g3 = as_igraph(as.data.frame(g2)) |> print() #> $V  tibble [6 × 1] (S3: tbl_df/tbl/data.frame) #>  $ name: int [1:6] 1 2 3 4 5 6 #> # A tibble: 3 × 2 #>    from    to #>   <int> <int> #> 1     1     2 #> 2     3     4 #> 3     5     6"},{"path":"https://heavywatal.github.io/rigraphlite/reference/distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance-related Functions — distances","title":"Distance-related Functions — distances","text":"average_path_length() path_length_hist() can computed result distances(), faster written C.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance-related Functions — distances","text":"","code":"distances(   graph,   from = integer(0L),   to = from,   weights = numeric(0L),   mode = 3L,   algorithm = c(\"dijkstra\", \"bellman-ford\", \"johnson\") )  average_path_length(   graph,   weights = numeric(0L),   directed = is_directed(graph),   unconn = TRUE )  path_length_hist(graph, directed = is_directed(graph))"},{"path":"https://heavywatal.github.io/rigraphlite/reference/distances.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Distance-related Functions — distances","text":"https://igraph.org/c/doc/igraph-Structural.html#shortest-path-related-functions","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance-related Functions — distances","text":"graph igraph_ptr object. integer vector vertex IDs. integer vector vertex IDs. weights numeric vector edge weights; TRUE use Eattr(graph, \"weight\"). mode integer value edge type count; {1: , 2: , 3: }. algorithm character string. directed logical value, whether consider directed paths. Ignored undirected graphs. unconn logical value.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance-related Functions — distances","text":"distances() returns matrix distances vertices. average_path_length() returns numeric value. path_length_hist() returns integer vector.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance-related Functions — distances","text":"","code":"g = graph_tree(5L) distances(g, mode = 1L) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    1    2    2 #> [2,]  Inf    0  Inf    1    1 #> [3,]  Inf  Inf    0  Inf  Inf #> [4,]  Inf  Inf  Inf    0  Inf #> [5,]  Inf  Inf  Inf  Inf    0 average_path_length(g) #> [1] 1.333333 path_length_hist(g) #> [1] 4 2"},{"path":"https://heavywatal.github.io/rigraphlite/reference/experimental.html","id":null,"dir":"Reference","previous_headings":"","what":"Experimental functions — find_common_ancestors","title":"Experimental functions — find_common_ancestors","text":"Experimental functions","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/experimental.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Experimental functions — find_common_ancestors","text":"","code":"find_common_ancestors(graph, vids)  upstream_vertices(graph, vids, to_mrca = TRUE)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/experimental.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Experimental functions — find_common_ancestors","text":"graph igraph_ptr object. vids integer vector vertex IDs. to_mrca Boolean.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/from-to.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick access to edge list columns — igraph_from","title":"Quick access to edge list columns — igraph_from","text":"one two columns edge list needed, functions provide efficient way access .","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/from-to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick access to edge list columns — igraph_from","text":"","code":"igraph_from(graph)  igraph_to(graph)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/from-to.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Quick access to edge list columns — igraph_from","text":"https://github.com/igraph/igraph/blob/master/include/igraph_datatype.h","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/from-to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick access to edge list columns — igraph_from","text":"graph igraph_ptr object.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/from-to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick access to edge list columns — igraph_from","text":"igraph_from() returns head vertices edges. igraph_to() returns tail vertices edges.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/from-to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick access to edge list columns — igraph_from","text":"","code":"g = graph_create(seq_len(6L)) igraph_from(g) #> [1] 1 3 5 igraph_to(g) #> [1] 2 4 6"},{"path":"https://heavywatal.github.io/rigraphlite/reference/generators.html","id":null,"dir":"Reference","previous_headings":"","what":"Deterministic Graph Generators — graph_create","title":"Deterministic Graph Generators — graph_create","text":"Deterministic Graph Generators","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/generators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deterministic Graph Generators — graph_create","text":"","code":"graph_create(edges, n = 0L, directed = TRUE)  graph_star(n, mode = 0L, center = 1L)  graph_lattice(   dim,   nei = 1L,   directed = FALSE,   mutual = FALSE,   circular = FALSE )  graph_ring(n, directed = FALSE, mutual = FALSE, circular = TRUE)  graph_tree(n, children = 2L, mode = 0L)  graph_full(n, directed = FALSE, mutual = FALSE)  graph_famous(name)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/generators.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Deterministic Graph Generators — graph_create","text":"https://igraph.org/c/doc/igraph-Generators.html","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/generators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deterministic Graph Generators — graph_create","text":"edges edges add, first two elements first edge, etc. n Integer, number vertices graph. directed Boolean mode Integer; igraph_star_mode_t {0: , 1: , 2: MUTUAL, 3: UNDIRECTED} igraph_tree_mode_t {0: , 1: , 2: UNDIRECTED} center Id vertex center graph. dim Vector giving sizes lattice dimensions. nei Integer distance within two vertices connected. mutual Boolean circular Boolean children Integer, number children vertex tree. name {Bull, Chvatal, Coxeter, Cubical, Diamond, Dodecahedral, Dodecahedron, Folkman, Franklin, Frucht, Grotzsch, Heawood, Herschel, House, HouseX, Icosahedral, Icosahedron, Krackhardt_Kite, Levi, McGee, Meredith, Noperfectmatching, Nonline, Octahedral, Octahedron, Petersen, Robertson, Smallestcyclicgroup, Tetrahedral, Tetrahedron, Thomassen, Tutte, Uniquely3colorable, Walther, Zachary}","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/igraph-class.html","id":null,"dir":"Reference","previous_headings":"","what":"igraph_ptr class: thin wrapper of igraph_t. — igraph_ptr","title":"igraph_ptr class: thin wrapper of igraph_t. — igraph_ptr","text":"igraph_ptr class: thin wrapper igraph_t.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/igraph-class.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"igraph_ptr class: thin wrapper of igraph_t. — igraph_ptr","text":"external pointer C++ IGraph class object.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/igraph-class.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"igraph_ptr class: thin wrapper of igraph_t. — igraph_ptr","text":"https://github.com/igraph/igraph/blob/master/include/igraph_datatype.h","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/igraphlite-package.html","id":null,"dir":"Reference","previous_headings":"","what":"igraphlite: Lightweight R Interface to Igraph Network Analysis Library — igraphlite-package","title":"igraphlite: Lightweight R Interface to Igraph Network Analysis Library — igraphlite-package","text":"cpp11-powered R package interface igraph network analysis library. fork existing R igraph package, reboot scratch striving good performance, simple codebase, consistency C implementation.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/igraphlite-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"igraphlite: Lightweight R Interface to Igraph Network Analysis Library — igraphlite-package","text":"Maintainer: Watal M. Iwasaki heavywatal@gmail.com (ORCID)","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/is_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is igraph_ptr class — is_igraph","title":"Check if an object is igraph_ptr class — is_igraph","text":"Check object igraph_ptr class","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/is_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is igraph_ptr class — is_igraph","text":"","code":"is_igraph(x)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/is_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is igraph_ptr class — is_igraph","text":"x object tested.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/is_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is igraph_ptr class — is_igraph","text":"TRUE object class igraph_ptr, FALSE otherwise.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/is_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is igraph_ptr class — is_igraph","text":"","code":"is_igraph(graph_tree(6L)) #> [1] TRUE is_igraph(seq_len(6L)) #> [1] FALSE"},{"path":"https://heavywatal.github.io/rigraphlite/reference/layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Layouts for Graph Drawing — layout_nicely","title":"Layouts for Graph Drawing — layout_nicely","text":"Layouts Graph Drawing","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layouts for Graph Drawing — layout_nicely","text":"","code":"layout_nicely(graph, ...)  layout_random(graph)  layout_drl(graph)  layout_fruchterman_reingold(graph, grid = 2L)  layout_mds(graph, dist)  layout_reingold_tilford(graph, mode = 1L, roots = integer(0))  layout_reingold_tilford_circular(graph, mode = 1L, roots = integer(0))"},{"path":"https://heavywatal.github.io/rigraphlite/reference/layout.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Layouts for Graph Drawing — layout_nicely","text":"https://igraph.org/c/doc/igraph-Layout.html","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layouts for Graph Drawing — layout_nicely","text":"graph igraph_ptr object. ... Passed internal layout function. grid Whether use (fast less accurate) grid based version; {0: GRID, 1: NOGRID, 2: AUTOGRID}. dist distant matrix. mode integer value edge type count; {1: , 2: , 3: }. roots Root vertices.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/neighborhood.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighborhood of vertices — neighborhood_size","title":"Neighborhood of vertices — neighborhood_size","text":"Neighborhood vertices","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/neighborhood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighborhood of vertices — neighborhood_size","text":"","code":"neighborhood_size(   graph,   vids = integer(0),   order = 1L,   mode = 1L,   mindist = 0L )  neighborhood(graph, vids = integer(0), order = 1L, mode = 1L, mindist = 0L)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/neighborhood.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Neighborhood of vertices — neighborhood_size","text":"https://igraph.org/c/doc/igraph-Structural.html#neighborhood---vertex","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/neighborhood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighborhood of vertices — neighborhood_size","text":"graph igraph_ptr object. vids integer vector vertex IDs. order integer giving order neighborhood; e.g., order = 1L considers immediate neighbors. mode integer value edge type count; {1: , 2: , 3: }. mindist minimum distance include vertex counting; e.g., mindist = 1L excludes starting vertex , 2L excludes immediate neighbors.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/neighborhood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighborhood of vertices — neighborhood_size","text":"neighborhood_size() returns integer vector neighborhood sizes given vertices. neighborhood() returns list integer vectors, containing vertex IDs neighbors given vertices.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/neighborhood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighborhood of vertices — neighborhood_size","text":"","code":"g = graph_tree(5L) neighborhood_size(g) #> [1] 3 3 1 1 1 neighborhood(g) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 2 4 5 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 4 #>  #> [[5]] #> [1] 5 #>"},{"path":"https://heavywatal.github.io/rigraphlite/reference/paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortest Path Related Functions — paths","title":"Shortest Path Related Functions — paths","text":"get_shortest_paths() returns single shortest path per vertex pair, variant _all_ returns found paths. variant _simple_ removes paths cycles. results simple graphs like trees, order paths may differ.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortest Path Related Functions — paths","text":"","code":"get_shortest_paths(   graph,   from,   to = integer(0L),   weights = numeric(0L),   mode = 3L )  get_all_shortest_paths(   graph,   from,   to = integer(0L),   weights = numeric(0L),   mode = 3L )  get_all_simple_paths(graph, from, to = integer(0L), cutoff = -1L, mode = 3L)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/paths.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Shortest Path Related Functions — paths","text":"https://igraph.org/c/doc/igraph-Structural.html#shortest-path-related-functions","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortest Path Related Functions — paths","text":"graph igraph_ptr object. integer vector vertex IDs. integer vector vertex IDs. weights numeric vector edge weights; TRUE use Eattr(graph, \"weight\"). mode integer value edge type count; {1: , 2: , 3: }. cutoff integer","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortest Path Related Functions — paths","text":"list integer IDs vertices paths.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shortest Path Related Functions — paths","text":"","code":"g = graph_tree(5L) vsource = Vsource(g) vsink = Vsink(g) get_shortest_paths(g, vsource, vsink, mode = 1L) #> [[1]] #> [1] 1 3 #>  #> [[2]] #> [1] 1 2 4 #>  #> [[3]] #> [1] 1 2 5 #>  get_all_shortest_paths(g, vsource, vsink, mode = 1L) #> [[1]] #> [1] 1 3 #>  #> [[2]] #> [1] 1 2 4 #>  #> [[3]] #> [1] 1 2 5 #>  get_all_simple_paths(g, vsource, vsink, mode = 1L) #> [[1]] #> [1] 1 2 4 #>  #> [[2]] #> [1] 1 2 5 #>  #> [[3]] #> [1] 1 3 #>"},{"path":"https://heavywatal.github.io/rigraphlite/reference/phylo.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion between phylo and igraph — as_igraph.phylo","title":"Conversion between phylo and igraph — as_igraph.phylo","text":"Conversion phylo igraph","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/phylo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion between phylo and igraph — as_igraph.phylo","text":"","code":"# S3 method for class 'phylo' as_igraph(x, ...)  as_phylo(x)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/phylo.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Conversion between phylo and igraph — as_igraph.phylo","text":"https://cran.r-project.org/package=ape","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/phylo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion between phylo and igraph — as_igraph.phylo","text":"x object convert. ... Additional arguments passed graph_from_edgelist().","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for quick visualization — augment.igraph_ptr","title":"Methods for quick visualization — augment.igraph_ptr","text":"Methods quick visualization","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for quick visualization — augment.igraph_ptr","text":"","code":"# S3 method for class 'igraph_ptr' augment(x, layout = NULL, ...)  # S3 method for class 'igraph_ptr' plot(x, ..., lwd = 0.6, cex = 6, col = \"#cccccc\", pch = 16)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for quick visualization — augment.igraph_ptr","text":"x igraph_ptr object. layout function resulting data.frame. provided, layout_nicely() applied. ... Extra arguments passed layout function. lwd Passed ggplot2::geom_segment(). cex, col, pch Passed ggplot2::geom_point() ggplot2::geom_text().","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for quick visualization — augment.igraph_ptr","text":"augment() returns data frame used ggplot2::ggplot(). plot.igraph_ptr() returns ggplot object.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for quick visualization — augment.igraph_ptr","text":"","code":"g = graph_tree(5L) augment(g, layout = layout_reingold_tilford) #> # A tibble: 5 × 6 #>    from    to     x     y  xend  yend #>   <int> <int> <dbl> <dbl> <dbl> <dbl> #> 1     1     1   0       0   0       0 #> 2     1     2  -0.5     1   0       0 #> 3     1     3   0.5     1   0       0 #> 4     2     4  -1       2  -0.5     1 #> 5     2     5   0       2  -0.5     1  plot(g, layout = layout_reingold_tilford) +   ggplot2::theme_minimal(base_size = 14)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/random.html","id":null,"dir":"Reference","previous_headings":"","what":"Seeds a random number generator — igraph_rng_seed","title":"Seeds a random number generator — igraph_rng_seed","text":"Initializes igraph_rng_default() integer seed.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seeds a random number generator — igraph_rng_seed","text":"","code":"igraph_rng_seed(seed)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/random.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Seeds a random number generator — igraph_rng_seed","text":"https://igraph.org/c/doc/igraph-Random.html","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seeds a random number generator — igraph_rng_seed","text":"seed integer.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Seeds a random number generator — igraph_rng_seed","text":"NULL.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Seeds a random number generator — igraph_rng_seed","text":"","code":"igraph_rng_seed(24601L)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/s3-method.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 methods to get and view internal data. — print.igraph_ptr","title":"S3 methods to get and view internal data. — print.igraph_ptr","text":"S3 methods get view internal data.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/s3-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 methods to get and view internal data. — print.igraph_ptr","text":"","code":"# S3 method for class 'igraph_ptr' print(x, ...)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/s3-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 methods to get and view internal data. — print.igraph_ptr","text":"x igraph_ptr object. ... Extra arguments passed method.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/s3-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 methods to get and view internal data. — print.igraph_ptr","text":"original x invisibly.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/s3-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 methods to get and view internal data. — print.igraph_ptr","text":"","code":"print(graph_tree(5L)) #> $V  tibble [5 × 0] (S3: tbl_df/tbl/data.frame) #>  Named list() #> # A tibble: 4 × 2 #>    from    to #>   <int> <int> #> 1     1     2 #> 2     1     3 #> 3     2     4 #> 4     2     5"},{"path":"https://heavywatal.github.io/rigraphlite/reference/sink.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortcuts to get sink/source vertices. — is_sink","title":"Shortcuts to get sink/source vertices. — is_sink","text":"simple wrappers around degree() get zero-degree vertices.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/sink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortcuts to get sink/source vertices. — is_sink","text":"","code":"is_sink(graph)  is_source(graph)  Vsink(graph)  Vsource(graph)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/sink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortcuts to get sink/source vertices. — is_sink","text":"graph igraph_ptr object.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/sink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortcuts to get sink/source vertices. — is_sink","text":"is_sink() is_source() return logical vector indicating whether vertices graph terminating starting points, respectively. Vsink() Vsource() return terminating starting vertices graph, respectively.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/sink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shortcuts to get sink/source vertices. — is_sink","text":"","code":"g = graph_tree(5L) is_sink(g) #> [1] FALSE FALSE  TRUE  TRUE  TRUE is_source(g) #> [1]  TRUE FALSE FALSE FALSE FALSE Vsink(g) #> [1] 3 4 5 Vsource(g) #> [1] 1"},{"path":"https://heavywatal.github.io/rigraphlite/reference/subgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscellaneous operators — induced_subgraph","title":"Miscellaneous operators — induced_subgraph","text":"induced_subgraph() can achieved two steps induced_subgraph_edges() subgraph_from_edges(), much slower expected.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/subgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscellaneous operators — induced_subgraph","text":"","code":"induced_subgraph(graph, vids, impl = 0L)  induced_subgraph_edges(graph, vids)  subgraph_from_edges(graph, eids, delete_vertices = TRUE)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/subgraph.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscellaneous operators — induced_subgraph","text":"https://igraph.org/c/doc/igraph-Operators.html#miscellaneous-operators","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/subgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Miscellaneous operators — induced_subgraph","text":"graph igraph_ptr object. vids integer vector vertex IDs. impl construct new graph: {0: AUTO, 1: COPY_AND_DELETE, 2: CREATE_FROM_SCRATCH} eids integer vector edge IDs. delete_vertices whether delete unused vertices.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/rigraphlite/reference/tbl_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion between tbl_tree and igraph — as_igraph.tbl_tree","title":"Conversion between tbl_tree and igraph — as_igraph.tbl_tree","text":"Conversion tbl_tree igraph","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/tbl_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion between tbl_tree and igraph — as_igraph.tbl_tree","text":"","code":"# S3 method for class 'tbl_tree' as_igraph(x, ...)  as_tbl_tree(x)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/tbl_tree.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Conversion between tbl_tree and igraph — as_igraph.tbl_tree","text":"https://cran.r-project.org/package=tidytree","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/tbl_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion between tbl_tree and igraph — as_igraph.tbl_tree","text":"x object convert. ... Additional arguments passed graph_from_edgelist().","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the version of the igraph C library — igraph_version","title":"Get the version of the igraph C library — igraph_version","text":"confused R package version.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the version of the igraph C library — igraph_version","text":"","code":"igraph_version()"},{"path":"https://heavywatal.github.io/rigraphlite/reference/version.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get the version of the igraph C library — igraph_version","text":"https://igraph.org/c/doc/igraph-Nongraph.html","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the version of the igraph C library — igraph_version","text":"character string igraph version.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the version of the igraph C library — igraph_version","text":"","code":"igraph_version() #> [1] \"0.10.15\""},{"path":"https://heavywatal.github.io/rigraphlite/reference/vnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion between vertex IDs and names — Vnames","title":"Conversion between vertex IDs and names — Vnames","text":"Vnames() equivalent Vattr() \"name\", slightly faster. as_vids() as_vnames() shorthands using Vnames().","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/vnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion between vertex IDs and names — Vnames","text":"","code":"Vnames(graph)  as_vids(graph, vnames)  as_vnames(graph, vids)"},{"path":"https://heavywatal.github.io/rigraphlite/reference/vnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion between vertex IDs and names — Vnames","text":"graph igraph_ptr object. vnames Vertex names stored Vattr(g)$name. vids integer vector vertex IDs.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/vnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion between vertex IDs and names — Vnames","text":"Vnames() as_vnames() return character vector vertex names. as_vids() returns integer vector vertex IDs.","code":""},{"path":"https://heavywatal.github.io/rigraphlite/reference/vnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion between vertex IDs and names — Vnames","text":"","code":"g = graph_create(letters[1:6]) Vnames(g) #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" as_vids(g, c(\"d\", \"b\")) #> [1] 4 2 as_vnames(g, c(4L, 2L)) #> [1] \"d\" \"b\""}]
